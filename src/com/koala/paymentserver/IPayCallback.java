package com.koala.paymentserver;

import java.util.Map;

/**
 * 支付/充值回调（SDK服务器通过Http回调我们的充值服务器）的通用接口。
 * 
 * <pre>
 * 有些渠道的通知是用GET/POST方法直接将参数传递过来的，如“<code>order=12083081230&mid=123&time=20130703122132</code>”
 * 
 * 有些渠道的通知是用POST方法将内容传递过来的，如JSON
 * 
 * 【部分渠道的文档说明】
 * ==================================================================360
 * 4.2.2  支付结果通知接口–应用服务器提供接口,  由360服务器回调 
 * 应用调用支付接口时,  需指定支付结果的通知回调地址notify_uri. 支付完成后, 360 服务器会把支
 * 付结果以GET方式通知到此地址 (建议应用同时支持GET和POST).  应用接收验证参数后,  给用户
 * 做游戏内充值. 
 *  
 * 应用在接收到通知消息后, 需回应ok, 表示通知已经接收.  如果回应其他值或者不回应,  则被认为
 * 通知失败, 360 会尝试多次通知.  这个机制用来避免掉单. 
 *  
 * 应用应做好接收到多次通知的准备, 防止多次加钱. 同时,  需要特别注意的是,  回应的ok表示应用
 * 已经正常接到消息,  无需继续发送通知. 它不表示订单成功与否,  或者应用处理成功与否.  对于重复
 * 的通知, 应用可能发现订单已经成功处理完毕,  无需继续处理,  也要返回ok. 否则, 360会认为未成
 * 功通知, 会继续发送通知.
 * 
 * ==================================================================UC
 * 充值操作完成后，不论是否充值成功，“SDK服务器”都会将充值结果通过“充值
 * 结果回调接口”发送到“游戏服务器”。“游戏服务器”收到“SDK服务器”的充值通知
 * 后，根据处理结果返回字符串SUCCESS或FAILURE。如果返回SUCCESS，则“SDK
 * 服务器”结束通知任务；如果返回FAILURE或由于网络延时导致“SDK服务器”没有
 * 收到任何返回，SDK服务器将会在周期内进行重复通知。
 * 建议：
 * “游戏服务器”在接收“SDK服务器”的充值结果通知时，不管订单是否成功，只要业务逻辑正常，一般都应该返回SUCCESS，表示不需要“SDK服务器”再次发起通
 * 知。当业务逻辑异常（如：收到的SDK服务器的充值结果通知内容的签名不正确、充
 * 值结果与提交的充值请求不符等），认为需要再次通知，才返回FAILURE。
 * 【注意】：
 * 由于存在多次发送通知的情况，因此“游戏服务器”必须能够正确处理重复的通知。
 * 当接收到通知时，需要检查系统内对应业务数据的状态，以判断该通知是否已经处理过。
 * 在对业务数据进行状态检查或处理之前，需要采取数据加锁或时间戳判断等方式进行并
 * 发控制。
 * 由于支付网关的通知机制原因，偶尔会发生通知支付失败后又通知支付成功的现象。
 * 基于这个情况，“游戏服务器”在处理充值结果通知时，对同一个订单，如果先接收到
 * 支付失败，再接收到支付成功的通知，应以成功的支付结果为准，替换原接收到的失败
 * 的支付结果。一旦通知支付成功，不会再发生通知支付失败的情形。
 * 
 * </pre>
 * 
 * @author AHONG
 * 
 */
public interface IPayCallback {

//	/** 测试用，不进行签名检测 */
//	final boolean TestNoSign = true;

	/**
	 * 参数形式。有些渠道的通知是用GET/POST方法直接将参数传递过来的，如“
	 * <code>order=12083081230&mid=123&time=20130703122132</code>”
	 * 
	 * @param params
	 * @return 
	 *         Http的Response内容，返回给SDK服务器，表示已经收到充值通知（如当乐：<i>http请求的response中回写‘success
	 *         ’，表明通知接收成功。如果计费通知接口没有回写success，当乐的通知发送程序会认为通知发送失败，在一定的间隔时间后重发通知。
	 *         每笔订单的重复通知次数为10次，时间间隔为15秒。注：此处的success表示通知接收成功，与本次支付的结果无关。</i>）
	 * @throws Exception
	 */
	String parse(Map<String, String> params) throws Exception;

	/**
	 * 数据形式：有些渠道的通知是用POST方法将内容传递过来的，如JSON
	 * 
	 * @param content
	 * @return 
	 *         Http的Response内容，返回给SDK服务器，表示已经收到充值通知（如当乐：<i>http请求的response中回写‘success
	 *         ’，表明通知接收成功。如果计费通知接口没有回写success，当乐的通知发送程序会认为通知发送失败，在一定的间隔时间后重发通知。
	 *         每笔订单的重复通知次数为10次，时间间隔为15秒。注：此处的success表示通知接收成功，与本次支付的结果无关。</i>）
	 * @throws Exception
	 */
	String parse(String content) throws Exception;

	/**
	 * 收到渠道SDK服务器的支付/充值结果回调后，对应渠道的{@link IPayCallback}对象会进行{{@link #parse()}
	 * ，处理中会生成一个支付/充值订单{@link PayOrder}(如果过程有其它原因可能导致生成失败则为null)
	 * 
	 * @return 处理中会生成一个支付/充值订单{@link PayOrder}(如果过程有其它原因可能导致生成失败则为null)
	 */
	PayOrder getGeneratedPayOrder();
	
	/**
	 * “成功”的响应内容。具体看本文件的doc
	 * @return
	 */
	String responseOfRepeatCallback();
}
